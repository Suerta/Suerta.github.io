[{"title":"springBoot学习","date":"2021-01-19T10:02:20.288Z","path":"2021/01/19/springBoot学习/","text":"整理springboot从入门到源码的学习，了解其概貌以及深层原理。 一、springBoot核心技术（一）spring基础入门 springBoot介绍 简化spring应用开发的一个框架 整个spring技术栈的一个大整合 J2EE开发的一站式解决方案 微服务 架构风格 一个应用应该是一组小型服务；可以通过http的方式进行互通； 环境约束 jdk1.8 : SpringBoot1.7及以上； maven3.X : maven3.3以上版本[相对来说更加的稳定] IDEA2017及以上 springBoot1.5.9 RELEASE 环境配置 123456789//Maven的setting.xml&lt;!-- 国内远程仓库：阿里云镜像 --&gt; &lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt; 123456789101112131415161718192021222324252627282930313233343536373839//pom.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.example&lt;/groupId&gt; &lt;artifactId&gt;myproject&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.4.2&lt;/version&gt; &lt;/parent&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;description/&gt; &lt;developers&gt; &lt;developer/&gt; &lt;/developers&gt; &lt;licenses&gt; &lt;license/&gt; &lt;/licenses&gt; &lt;scm&gt; &lt;url/&gt; &lt;/scm&gt; &lt;url/&gt; &lt;!-- Additional lines to be added here... --&gt;&lt;/project&gt; hello world ①主程序 12345678910111213import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;/** *@SpringBootApplication 用于标注主程序类，说明这是一个springboot应用 */@SpringBootApplicationpublic class HelloWorldMainApplication &#123; public static void main(String[] args) &#123; //springboot应用启动 SpringApplication.run(HelloWorldMainApplication.class,args); &#125;&#125; ②业务层 12345678910111213import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;@Controllerpublic class ApplicationController &#123; @ResponseBody @RequestMapping(&quot;/hello&quot;) public String sayHello()&#123; return &quot;hey guys!&quot;; &#125;&#125; ③简化部署 123456789&lt;!-- 将应用打包成一个可执行的jar包 --&gt;&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; maven -&gt; lifecycle -&gt;package进行打包 在D:\\exploit\\project\\webProject\\springBootdamo2\\target目录下执行 java -jar 生成的jar包的名字【该目录为package打包成功的位置，一般在项目的target中，日志文件中会记录】 刷新页面，依旧出现helloworld，环境中没有tomcat也没事。因为打包插件中已经存在了。 （二）spring核心功能1. helloworld探究a.pom文件1234567&lt;!-- 父项目 --&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.4.1&lt;/version&gt; &lt;/parent&gt; 👆↑的父项目是👇↓ 12345&lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt; &lt;version&gt;2.4.1&lt;/version&gt;&lt;/parent&gt; 再点进去看，会看到springboot将需要的插件都进行了依赖管理，也就是说👆↑是真正来管理springBoot应用里面中的所有版本依赖。即springBoot版本仲裁中心。因此导入依赖时可以不用写版本号。没有在dependencies中管理的需要写。 b.导入的依赖1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt; spring-boot-start : springBoot场景启动器；帮我们导入了web模块需要正常运行所依赖的组件； springBoot将所有的场景都抽取出来，做成一个个starters（启动器），只需要在项目里引用这些starter相关场景的所有依赖，需要什么样的功能就导入什么样的启动器。 c.主程序类[主入口类] @SpringBootApplication:Springboot应用标注某个类上说明这个类是主程序类。Springboot就运行该类的main方法来启动应用。 123456789101112131415@Target(&#123;ElementType.TYPE&#125;)@Retention(RetentionPolicy.RUNTIME)@Documented@Inherited@SpringBootConfiguration@EnableAutoConfiguration@ComponentScan( excludeFilters = &#123;@Filter( type = FilterType.CUSTOM, classes = &#123;TypeExcludeFilter.class&#125;), @Filter( type = FilterType.CUSTOM, classes = &#123;AutoConfigurationExcludeFilter.class&#125;)&#125;) @SpringBootConfiguration:springBoot的配置类 ​ 标注在某个类上，表示该类是一个配置类。 ​ @Configuration：配置类[曾经的配置文件]配置类也是容器的一个组件；@Component @EnableAutoConfiguration:开启自动配置功能； ​ @AutoConfigurationPackage:自动配置包 ​ @Import({Registrar.class}):spring底层注解。给容器中导入一个组件。将主配置类的所在包下边的所有子包中的所有组件扫描到spring容器中。 ​ @Import({AutoConfigurationImportSelector.class}):给容器中导入AutoConfigurationImportSelector组件。AutoConfigurationImportSelector将所有需要导入的组件以全类名的方式返回；这些组件就会添加到容器中。 （三）spring场景整合二、springBoot响应式编程（一）响应式编程基础（二）webflux开发web应用（三）响应式访问持久层（四）响应式安全开发（五）响应式原理","tags":[{"name":"spring","slug":"spring","permalink":"https://suerta.github.io/tags/spring/"}]},{"title":"Hello World","date":"2021-01-14T08:27:16.070Z","path":"2021/01/14/hello-world/","text":"我告诉你我喜欢你，并不是一定要和你在一起，只是希望今后的你，在遭遇人生低谷的时候，不要灰心，至少曾经有人被你的魅力所吸引，曾经是，以后也会是。","tags":[{"name":"杂谈","slug":"杂谈","permalink":"https://suerta.github.io/tags/%E6%9D%82%E8%B0%88/"}]}]